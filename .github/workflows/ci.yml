name: CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v1

      - name: Cache
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Login to NPM
        run: |
          echo '' >> ~/.npmrc
          echo '//registry.npmjs.org/:_authToken=${{secrets.NPM_TOKEN}}' >> ~/.npmrc
          cat ~/.npmrc

      - name: Install Dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          npm -v
          npm install
        env:
          CI: true

      - name: Build
        run: |
          ./node_modules/.bin/node-ts-scripts bundle src/index.ts --outputDir=build --dts
          ./node_modules/.bin/node-ts-scripts bundle docker/splashdb-node/index.ts --outputDir=docker/splashdb-node
        env:
          CI: true

      - name: Docker Login
        if: |
          github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          echo "${{secrets.GITHUB_TOKEN}}" | docker login docker.pkg.github.com -u ${GITHUB_ACTOR} --password-stdin
          echo "${{secrets.DOCKER_TOKEN}}" | docker login -u heineiuo --password-stdin

      - name: Build Docker(splashdb/mongo) / Publish to registry(GITHUB + Docker Hub)
        if: |
          github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          export IMAGE_VERSION=$(node -p "require('./package.json').version")
          export IMAGE_TAG=docker.pkg.github.com/${GITHUB_REPOSITORY}/mongo:${IMAGE_VERSION}
          echo "::set-env name=IMAGE_TAG::${IMAGE_TAG}"
          cd docker/splashdb-mongo
          docker build -t ${IMAGE_TAG} .
          docker images
          docker push ${IMAGE_TAG}
          docker tag ${IMAGE_TAG} splashdb/mongo:${IMAGE_VERSION}
          docker push splashdb/mongo:${IMAGE_VERSION}
        env:
          CI: true

      - name: Build Docker(splashdb/pd) / Publish to registry(GITHUB + Docker Hub)
        if: |
          github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          export IMAGE_VERSION=$(pd -p "require('./package.json').version")
          export IMAGE_TAG=docker.pkg.github.com/${GITHUB_REPOSITORY}/pd:${IMAGE_VERSION}
          echo "::set-env name=IMAGE_TAG::${IMAGE_TAG}"
          cd docker/splashdb-pd
          docker build -t ${IMAGE_TAG} .
          docker images
          docker push ${IMAGE_TAG}
          docker tag ${IMAGE_TAG} splashdb/pd:${IMAGE_VERSION}
          docker push splashdb/pd:${IMAGE_VERSION}
        env:
          CI: true

      - name: Build Docker(splashdb/node) / Publish to registry(GITHUB + Docker Hub)
        if: |
          github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          export IMAGE_VERSION=$(node -p "require('./package.json').version")
          export IMAGE_TAG=docker.pkg.github.com/${GITHUB_REPOSITORY}/node:${IMAGE_VERSION}
          echo "::set-env name=IMAGE_TAG::${IMAGE_TAG}"
          cd docker/splashdb-node
          docker build -t ${IMAGE_TAG} .
          docker images
          docker push ${IMAGE_TAG}
          docker tag ${IMAGE_TAG} splashdb/node:${IMAGE_VERSION}
          docker push splashdb/node:${IMAGE_VERSION}
        env:
          CI: true

      - name: Create Changelogs
        if: |
          github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        id: changelog
        uses: heineiuo/create-changelogs@master

      - name: Publish to NPM
        if: |
          github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          npm publish

      - name: Create Release
        if: |
          github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: ${{ steps.changelog.outputs.changelogs }}
          draft: false
          prerelease:
            ${{ steps.changelog.outputs.release_type == 'prerelease' }}

